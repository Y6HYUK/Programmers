def solution(n):
    # 1로 만들 수 있는 조합은 무조건 1개
    # n이 짝수인지 홀수 인지 판별이 필요
    # n = 3일때 3개
    # n = 4일때 5개
    # n = 5일때 8개
    # n = 6일때 13개
    # 피보나치 ? 
    
    # n = 3 -> 2, 3 개로 가능
    # (1 1 1) (2 1) (1 2) => 2C1
    
    # n = 4 -> 2, 3, 4개로 가능
    # (1 1 1 1) (2 1 1) (1 2 1) (1 1 2) (2 2) => 3C2
    
    # n = 5 -> 3, 4, 5개로 가능
    # (1 1 1 1 1) (2 1 1 1) (1 2 1 1) (1 1 2 1) (1 1 1 2) (2 2 1) (2 1 2) (1 2 2) 
    # -> 4C3 , 3C2
    
    # n = 6 -> 3, 4, 5, 6개로 가능
    # (1 1 1 1 1 1) 
    # (2 1 1 1 1)
    # (2 2 1 1) -> 4C2 (1 1 2 2) (1 2 1 2) (1 2 2 1) (2 1 1 2) (2 1 2 1) (2 2 1 1)
    # (2 2 2)
    # 1 + 5 + 6 + 1
    
    # n = 7 -> 4, 5, 6, 7개로 가능
    # (1 1 1 1 1 1 1) : 1
    # (2 1 1 1 1 1) : 6
    # (2 2 1 1 1) : 10
    # (2 2 2 1) : 4
    
    
    # n = 1일때 1개, n = 2일때 2개
    # n = 3일때 3개
    # n = 4일때 5개
    # n = 5일때 8개
    # n = 6일때 13개
    # n = 7일때 21개
    # 위와같은 피보나치 수열의 공식이 된다
    # 재귀함수 대신, 리스트를 만들고 추가하는 형식으로 진행
    
    # 1. 재귀함수로 풀어보기 => 시간초과 실패
#     def fibonacci(num):
#         if num == 1:
#             return 1
#         elif num == 2:
#             return 2
#         else:
#             return fibonacci(num-2) + fibonacci(num-1)
        
#     answer = fibonacci(n)
#     print(answer)
#     return answer

    # 2. 리스트를 생성하여 풀어보기
    num_list = [1, 2]
    for i in range(3, n+1):
        append_num = num_list[-1] + num_list[-2]
        num_list.append(append_num)
        
    # print(num_list)
    
    # n = 1, n = 2일때의 리턴을 정해주지 않으면 테스트1의 케이스에서 실패됨
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return num_list[-1] % 1234567